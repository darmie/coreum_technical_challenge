// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: conversion.proto

package conversion

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConversionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources []string `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	Targets []string `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	Value   float64  `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"` // The value to be converted, proto3 doesn't support defauly values; client may be forced to provide one.
}

func (x *ConversionRequest) Reset() {
	*x = ConversionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversion_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionRequest) ProtoMessage() {}

func (x *ConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversion_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionRequest.ProtoReflect.Descriptor instead.
func (*ConversionRequest) Descriptor() ([]byte, []int) {
	return file_conversion_proto_rawDescGZIP(), []int{0}
}

func (x *ConversionRequest) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *ConversionRequest) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *ConversionRequest) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// This is a general result structure, that can be used for single or many conversions.
type ConversionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ConversionResult_ConversionData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ConversionResult) Reset() {
	*x = ConversionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversion_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionResult) ProtoMessage() {}

func (x *ConversionResult) ProtoReflect() protoreflect.Message {
	mi := &file_conversion_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionResult.ProtoReflect.Descriptor instead.
func (*ConversionResult) Descriptor() ([]byte, []int) {
	return file_conversion_proto_rawDescGZIP(), []int{1}
}

func (x *ConversionResult) GetData() []*ConversionResult_ConversionData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BatchConversionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversion *ConversionRequest `protobuf:"bytes,1,opt,name=conversion,proto3" json:"conversion,omitempty"`
	BatchSize  int32              `protobuf:"varint,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
}

func (x *BatchConversionRequest) Reset() {
	*x = BatchConversionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversion_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchConversionRequest) ProtoMessage() {}

func (x *BatchConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversion_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchConversionRequest.ProtoReflect.Descriptor instead.
func (*BatchConversionRequest) Descriptor() ([]byte, []int) {
	return file_conversion_proto_rawDescGZIP(), []int{2}
}

func (x *BatchConversionRequest) GetConversion() *ConversionRequest {
	if x != nil {
		return x.Conversion
	}
	return nil
}

func (x *BatchConversionRequest) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

type RatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversion *ConversionRequest `protobuf:"bytes,1,opt,name=conversion,proto3" json:"conversion,omitempty"`
	Limit      int32              `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page       int32              `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *RatesRequest) Reset() {
	*x = RatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversion_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatesRequest) ProtoMessage() {}

func (x *RatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversion_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatesRequest.ProtoReflect.Descriptor instead.
func (*RatesRequest) Descriptor() ([]byte, []int) {
	return file_conversion_proto_rawDescGZIP(), []int{3}
}

func (x *RatesRequest) GetConversion() *ConversionRequest {
	if x != nil {
		return x.Conversion
	}
	return nil
}

func (x *RatesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RatesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

// This represents result data that will hold the paginated list of rates
type RatesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   *ConversionResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	CurrPage int32             `protobuf:"varint,2,opt,name=curr_page,json=currPage,proto3" json:"curr_page,omitempty"`
	HasNext  bool              `protobuf:"varint,3,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
}

func (x *RatesResult) Reset() {
	*x = RatesResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversion_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatesResult) ProtoMessage() {}

func (x *RatesResult) ProtoReflect() protoreflect.Message {
	mi := &file_conversion_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatesResult.ProtoReflect.Descriptor instead.
func (*RatesResult) Descriptor() ([]byte, []int) {
	return file_conversion_proto_rawDescGZIP(), []int{4}
}

func (x *RatesResult) GetResult() *ConversionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RatesResult) GetCurrPage() int32 {
	if x != nil {
		return x.CurrPage
	}
	return 0
}

func (x *RatesResult) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

type ConversionResult_ConversionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source currency
	SrcCurrency string `protobuf:"bytes,1,opt,name=src_currency,json=srcCurrency,proto3" json:"src_currency,omitempty"`
	// supports many mapped rates in case we want for single to single, single to many or many to many conversions
	Rate []*ConversionResult_ConversionData_DataMap `protobuf:"bytes,2,rep,name=rate,proto3" json:"rate,omitempty"`
}

func (x *ConversionResult_ConversionData) Reset() {
	*x = ConversionResult_ConversionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversion_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionResult_ConversionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionResult_ConversionData) ProtoMessage() {}

func (x *ConversionResult_ConversionData) ProtoReflect() protoreflect.Message {
	mi := &file_conversion_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionResult_ConversionData.ProtoReflect.Descriptor instead.
func (*ConversionResult_ConversionData) Descriptor() ([]byte, []int) {
	return file_conversion_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ConversionResult_ConversionData) GetSrcCurrency() string {
	if x != nil {
		return x.SrcCurrency
	}
	return ""
}

func (x *ConversionResult_ConversionData) GetRate() []*ConversionResult_ConversionData_DataMap {
	if x != nil {
		return x.Rate
	}
	return nil
}

// A map of target currency and the conversion value
type ConversionResult_ConversionData_DataMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TgtCurrency string  `protobuf:"bytes,1,opt,name=tgt_currency,json=tgtCurrency,proto3" json:"tgt_currency,omitempty"`
	Rate        float64 `protobuf:"fixed64,2,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *ConversionResult_ConversionData_DataMap) Reset() {
	*x = ConversionResult_ConversionData_DataMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversion_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionResult_ConversionData_DataMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionResult_ConversionData_DataMap) ProtoMessage() {}

func (x *ConversionResult_ConversionData_DataMap) ProtoReflect() protoreflect.Message {
	mi := &file_conversion_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionResult_ConversionData_DataMap.ProtoReflect.Descriptor instead.
func (*ConversionResult_ConversionData_DataMap) Descriptor() ([]byte, []int) {
	return file_conversion_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *ConversionResult_ConversionData_DataMap) GetTgtCurrency() string {
	if x != nil {
		return x.TgtCurrency
	}
	return ""
}

func (x *ConversionResult_ConversionData_DataMap) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

var File_conversion_proto protoreflect.FileDescriptor

var file_conversion_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5d,
	0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x94, 0x02,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0xbe, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72,
	0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x47, 0x0a, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x52, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x1a, 0x40, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x67, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x67, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x22, 0x76, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x77, 0x0a, 0x0c,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x7b, 0x0a, 0x0b, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75,
	0x72, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65,
	0x78, 0x74, 0x32, 0xf1, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x54, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x28, 0x01, 0x12, 0x3c, 0x0a, 0x05, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_conversion_proto_rawDescOnce sync.Once
	file_conversion_proto_rawDescData = file_conversion_proto_rawDesc
)

func file_conversion_proto_rawDescGZIP() []byte {
	file_conversion_proto_rawDescOnce.Do(func() {
		file_conversion_proto_rawDescData = protoimpl.X.CompressGZIP(file_conversion_proto_rawDescData)
	})
	return file_conversion_proto_rawDescData
}

var file_conversion_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_conversion_proto_goTypes = []interface{}{
	(*ConversionRequest)(nil),                       // 0: conversion.ConversionRequest
	(*ConversionResult)(nil),                        // 1: conversion.ConversionResult
	(*BatchConversionRequest)(nil),                  // 2: conversion.BatchConversionRequest
	(*RatesRequest)(nil),                            // 3: conversion.RatesRequest
	(*RatesResult)(nil),                             // 4: conversion.RatesResult
	(*ConversionResult_ConversionData)(nil),         // 5: conversion.ConversionResult.ConversionData
	(*ConversionResult_ConversionData_DataMap)(nil), // 6: conversion.ConversionResult.ConversionData.DataMap
}
var file_conversion_proto_depIdxs = []int32{
	5, // 0: conversion.ConversionResult.data:type_name -> conversion.ConversionResult.ConversionData
	0, // 1: conversion.BatchConversionRequest.conversion:type_name -> conversion.ConversionRequest
	0, // 2: conversion.RatesRequest.conversion:type_name -> conversion.ConversionRequest
	1, // 3: conversion.RatesResult.result:type_name -> conversion.ConversionResult
	6, // 4: conversion.ConversionResult.ConversionData.rate:type_name -> conversion.ConversionResult.ConversionData.DataMap
	0, // 5: conversion.ConversionService.Convert:input_type -> conversion.ConversionRequest
	2, // 6: conversion.ConversionService.ConvertBatch:input_type -> conversion.BatchConversionRequest
	3, // 7: conversion.ConversionService.Rates:input_type -> conversion.RatesRequest
	1, // 8: conversion.ConversionService.Convert:output_type -> conversion.ConversionResult
	1, // 9: conversion.ConversionService.ConvertBatch:output_type -> conversion.ConversionResult
	4, // 10: conversion.ConversionService.Rates:output_type -> conversion.RatesResult
	8, // [8:11] is the sub-list for method output_type
	5, // [5:8] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_conversion_proto_init() }
func file_conversion_proto_init() {
	if File_conversion_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_conversion_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversion_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversion_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchConversionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversion_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversion_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatesResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversion_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionResult_ConversionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversion_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionResult_ConversionData_DataMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_conversion_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_conversion_proto_goTypes,
		DependencyIndexes: file_conversion_proto_depIdxs,
		MessageInfos:      file_conversion_proto_msgTypes,
	}.Build()
	File_conversion_proto = out.File
	file_conversion_proto_rawDesc = nil
	file_conversion_proto_goTypes = nil
	file_conversion_proto_depIdxs = nil
}
