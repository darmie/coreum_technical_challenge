// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: conversion.proto

package conversion

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConversionServiceClient is the client API for ConversionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConversionServiceClient interface {
	// convert currencies
	Convert(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*ConversionResult, error)
	// perform batch conversion, client sends a (stream) sequence of batched conversion requests
	ConvertBatch(ctx context.Context, opts ...grpc.CallOption) (ConversionService_ConvertBatchClient, error)
	// get list of rates, the ones already persisted on db/storage
	Rates(ctx context.Context, in *RatesRequest, opts ...grpc.CallOption) (*RatesResult, error)
}

type conversionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConversionServiceClient(cc grpc.ClientConnInterface) ConversionServiceClient {
	return &conversionServiceClient{cc}
}

func (c *conversionServiceClient) Convert(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*ConversionResult, error) {
	out := new(ConversionResult)
	err := c.cc.Invoke(ctx, "/conversion.ConversionService/Convert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversionServiceClient) ConvertBatch(ctx context.Context, opts ...grpc.CallOption) (ConversionService_ConvertBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConversionService_ServiceDesc.Streams[0], "/conversion.ConversionService/ConvertBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &conversionServiceConvertBatchClient{stream}
	return x, nil
}

type ConversionService_ConvertBatchClient interface {
	Send(*BatchConversionRequest) error
	CloseAndRecv() (*ConversionResult, error)
	grpc.ClientStream
}

type conversionServiceConvertBatchClient struct {
	grpc.ClientStream
}

func (x *conversionServiceConvertBatchClient) Send(m *BatchConversionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *conversionServiceConvertBatchClient) CloseAndRecv() (*ConversionResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ConversionResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *conversionServiceClient) Rates(ctx context.Context, in *RatesRequest, opts ...grpc.CallOption) (*RatesResult, error) {
	out := new(RatesResult)
	err := c.cc.Invoke(ctx, "/conversion.ConversionService/Rates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversionServiceServer is the server API for ConversionService service.
// All implementations must embed UnimplementedConversionServiceServer
// for forward compatibility
type ConversionServiceServer interface {
	// convert currencies
	Convert(context.Context, *ConversionRequest) (*ConversionResult, error)
	// perform batch conversion, client sends a (stream) sequence of batched conversion requests
	ConvertBatch(ConversionService_ConvertBatchServer) error
	// get list of rates, the ones already persisted on db/storage
	Rates(context.Context, *RatesRequest) (*RatesResult, error)
	mustEmbedUnimplementedConversionServiceServer()
}

// UnimplementedConversionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConversionServiceServer struct {
}

func (UnimplementedConversionServiceServer) Convert(context.Context, *ConversionRequest) (*ConversionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Convert not implemented")
}
func (UnimplementedConversionServiceServer) ConvertBatch(ConversionService_ConvertBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method ConvertBatch not implemented")
}
func (UnimplementedConversionServiceServer) Rates(context.Context, *RatesRequest) (*RatesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rates not implemented")
}
func (UnimplementedConversionServiceServer) mustEmbedUnimplementedConversionServiceServer() {}

// UnsafeConversionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversionServiceServer will
// result in compilation errors.
type UnsafeConversionServiceServer interface {
	mustEmbedUnimplementedConversionServiceServer()
}

func RegisterConversionServiceServer(s grpc.ServiceRegistrar, srv ConversionServiceServer) {
	s.RegisterService(&ConversionService_ServiceDesc, srv)
}

func _ConversionService_Convert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversionServiceServer).Convert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conversion.ConversionService/Convert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversionServiceServer).Convert(ctx, req.(*ConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversionService_ConvertBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConversionServiceServer).ConvertBatch(&conversionServiceConvertBatchServer{stream})
}

type ConversionService_ConvertBatchServer interface {
	SendAndClose(*ConversionResult) error
	Recv() (*BatchConversionRequest, error)
	grpc.ServerStream
}

type conversionServiceConvertBatchServer struct {
	grpc.ServerStream
}

func (x *conversionServiceConvertBatchServer) SendAndClose(m *ConversionResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *conversionServiceConvertBatchServer) Recv() (*BatchConversionRequest, error) {
	m := new(BatchConversionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ConversionService_Rates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversionServiceServer).Rates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conversion.ConversionService/Rates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversionServiceServer).Rates(ctx, req.(*RatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConversionService_ServiceDesc is the grpc.ServiceDesc for ConversionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConversionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "conversion.ConversionService",
	HandlerType: (*ConversionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Convert",
			Handler:    _ConversionService_Convert_Handler,
		},
		{
			MethodName: "Rates",
			Handler:    _ConversionService_Rates_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConvertBatch",
			Handler:       _ConversionService_ConvertBatch_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "conversion.proto",
}
